{"version":3,"sources":["../node_modules/peerjs/dist sync","game/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Piece","Player","renderLine","line","row","onClick","map","x","col","tile","color","style","background","gridRow","gridColumn","border","renderTile","peer","Peer","conn","othercb","connect","c","on","data","App","useState","size","line1","Array","i","line2","board","newBoard","setBoard","player","setPlayer","other","setOther","yourTurn","setYourTurn","nb","JSON","parse","stringify","send","console","log","className","type","onChange","target","value","display","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2464d80c.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 17;","export type Position = {\n    x: number;\r\n    y: number;\r\n};\n\nexport enum Piece {\n    Pawn = 'pawn',\r\n    Spear = 'spear',\r\n    Knight = 'knight',\r\n    Silver = 'silver',\r\n    Gold = 'gold',\r\n    Bishop = 'bishop',\r\n    Rook = 'rook',\r\n    King = 'king',\r\n};\n\nexport enum Player {\n    White = 'white',\r\n    Black = 'black',\r\n};\n\nexport type BoardPiece = {\n    piece: Piece,\r\n    promoted: boolean,\r\n    player: Player,\r\n}\n\nexport type Board = {\n    [key: string]: BoardPiece;\n};\n\nexport function emptyBoard() {\n    return {};\r\n}\n\nexport function startBoard() {\n    return {\r\n        '0x0': { piece: Piece.Spear , promoted: false, player: Player.White },\r\n        '1x0': { piece: Piece.Knight, promoted: false, player: Player.White },\r\n        '2x0': { piece: Piece.Silver, promoted: false, player: Player.White },\r\n        '3x0': { piece: Piece.Gold  , promoted: false, player: Player.White },\r\n        '4x0': { piece: Piece.King  , promoted: false, player: Player.White },\r\n        '5x0': { piece: Piece.Gold  , promoted: false, player: Player.White },\r\n        '6x0': { piece: Piece.Silver, promoted: false, player: Player.White },\r\n        '7x0': { piece: Piece.Knight, promoted: false, player: Player.White },\r\n        '8x0': { piece: Piece.Spear , promoted: false, player: Player.White },\r\n        '1x1': { piece: Piece.Rook  , promoted: false, player: Player.White },\r\n        '7x1': { piece: Piece.Bishop, promoted: false, player: Player.White },\r\n        '0x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '1x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '2x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '3x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '4x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '5x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '6x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '7x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '8x2': { piece: Piece.Pawn  , promoted: false, player: Player.White },\r\n        '0x8': { piece: Piece.Spear , promoted: false, player: Player.Black },\r\n        '1x8': { piece: Piece.Knight, promoted: false, player: Player.Black },\r\n        '2x8': { piece: Piece.Silver, promoted: false, player: Player.Black },\r\n        '3x8': { piece: Piece.Gold  , promoted: false, player: Player.Black },\r\n        '4x8': { piece: Piece.King  , promoted: false, player: Player.Black },\r\n        '5x8': { piece: Piece.Gold  , promoted: false, player: Player.Black },\r\n        '6x8': { piece: Piece.Silver, promoted: false, player: Player.Black },\r\n        '7x8': { piece: Piece.Knight, promoted: false, player: Player.Black },\r\n        '8x8': { piece: Piece.Spear , promoted: false, player: Player.Black },\r\n        '7x7': { piece: Piece.Rook  , promoted: false, player: Player.Black },\r\n        '1x7': { piece: Piece.Bishop, promoted: false, player: Player.Black },\r\n        '0x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n        '1x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n        '2x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n        '3x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n        '4x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n        '5x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n        '6x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n        '7x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n        '8x6': { piece: Piece.Pawn  , promoted: false, player: Player.Black },\r\n    };\r\n}\n\nexport function allPositions(): Position[]\n{\n    return [...new Array(9)].map((_1, y) => [...new Array(9)].map((_2, x) => ({ x, y }))).flat();\r\n}\n","import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Peer from 'peerjs';\n\nimport {\n    Piece,\n    BoardPiece,\n    Player,\n    Position,\n    Board,\n    startBoard,\n    allPositions,\n} from './game';\n\ntype BoardEmpty = {\n    piece: 'empty';\r\n}\n\ntype BoardCell = BoardPiece | BoardEmpty;\ntype BoardFile = [ BoardCell, BoardCell, BoardCell, BoardCell, BoardCell, BoardCell, BoardCell, BoardCell, BoardCell ];\n\ntype GameState = {\n    board: Board;\r\n};\n\nfunction renderSpear({ style }: { style: Object })\n{\n    return <>\r\n        <line x1=\"50\" y1=\"15\" x2=\"50\" y2=\"85\" style={style} />\r\n        <line x1=\"50\" y1=\"15\" x2=\"40\" y2=\"55\" style={style} />\r\n        <line x1=\"40\" y1=\"55\" x2=\"50\" y2=\"65\" style={style} />\r\n        <line x1=\"50\" y1=\"15\" x2=\"60\" y2=\"55\" style={style} />\r\n        <line x1=\"60\" y1=\"55\" x2=\"50\" y2=\"65\" style={style} />\r\n        <line x1=\"40\" y1=\"85\" x2=\"60\" y2=\"85\" style={style} />\r\n    </>;\r\n}\n\nfunction renderBishop({ style }: { style: Object })\n{\n    return <>\r\n        <rect x=\"20\" y=\"75\" width=\"60\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"30\" y=\"65\" width=\"40\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"45\" y=\"35\" width=\"10\" height=\"30\" fill=\"transparent\" style={style} />\r\n    </>;\r\n}\n\n\nfunction renderRook({ style }: { style: Object })\n{\n    return <>\r\n        <rect x=\"20\" y=\"75\" width=\"60\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"32\" y=\"35\" width=\"36\" height=\"40\" fill=\"transparent\" style={style} />\r\n        <rect x=\"25\" y=\"25\" width=\"50\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"25\" y=\"15\" width=\"10\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"45\" y=\"15\" width=\"10\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"65\" y=\"15\" width=\"10\" height=\"10\" fill=\"transparent\" style={style} />\r\n    </>;\r\n}\n\nfunction renderPiece(piece?: Piece)\n{\n    const pieceRenderers: any = {\r\n        [Piece.Spear ]: renderSpear ,\r\n        [Piece.Rook  ]: renderRook  ,\r\n        [Piece.Bishop]: renderBishop,\r\n        \"\": () => null,\r\n    };\r\n    const style = {stroke:\"rgb(255,0,0)\",strokeWidth:\"2\"};\r\n    const svg = pieceRenderers[piece || \"\"]?.({ style: {} });\r\n    return  <svg height=\"100%\" width=\"100%\" style={style}>\r\n        {svg}\r\n    </svg>;\r\n}\n\n\nfunction renderCell(o: { piece?: BoardPiece, position: Position })\n{\r\n    const whiteCell = (o.position.y + o.position.x) % 2 == 0;\r\n\r\n    const cellStyle = {\r\n        gridRow: o.position.y + 1,\r\n        gridColumn: o.position.x + 1,\r\n        background: whiteCell ? 'grey' : 'lightgrey',\r\n        width: '100px',\r\n        height: '100px',\r\n    };\r\n\r\n    const pieceRenderers: any = {\r\n        [Piece.Spear]: renderSpear,\r\n        \"\": () => null,\r\n    };\r\n    const style = {stroke:\"rgb(255,0,0)\",strokeWidth:\"2\"};\r\n    const svg = pieceRenderers[o.piece?.piece || \"\"]?.({ style });\r\n\r\n    return <div style={cellStyle}>\r\n        {renderPiece(o.piece?.piece)}\r\n    </div>;\r\n\r\n            //{allPositions().map(({ x, y }) => <div style={{ gridRow: y + 1, gridColumn: x + 1 }}>{JSON.stringify(s[`${x}x${y}`] || {})}</div>)}\r\n}\n\nfunction AppShogi() {\n  let s: Board = startBoard();\n  console.log(s);\n\n  allPositions().map(({ x, y }) => <div>{x}-{y}</div>);\n  console.log([...new Array(9)].map((_1, y) => [...new Array(9)].map((_2, x) => ({ x, y }))).flat());\n\n  return (\n    <div className=\"App\">\n        <div style={{ display: 'grid', width: '900px', height: '900px' }}>\n            {allPositions().map(({ x, y }) => renderCell({ position: { x, y }, piece: s[`${x}x${y}`]}))}\n        </div>\n    </div>\n  );\n}\n\nfunction newBoard(size: number): number[][] {\n    const line1 = [2, ...[...new Array(size)].map((x, i) => i % 2 ? 1 : 0), 2];\n    const line2 = [2, ...[...new Array(size)].map((x, i) => i % 2 ? 0 : 2), 2];\n    const board = [...new Array(size)].map((x, i) => i % 2 ? line1 : line2);\n    return [\n        [1, ...[...new Array(size)].map(x => 1), 2],\n        ...board,\n        [2, ...[...new Array(size)].map(x => 1), 1],\n    ];\r\n}\n\ntype clickHandler = (row: number, col: number) => void;\n\nfunction renderTile(tile: number, row: number, col: number, onClick: clickHandler)\n{\n    const color = tile == 0 ? \"white\" : tile == 2 ? \"red\" : \"blue\";\r\n\n    return <span style={{background: color, gridRow: row + 1, gridColumn: col + 1, border: \"1px solid black\"}} onClick={(e) => onClick(row, col)}></span>\r\n}\n\nfunction renderLine(line: number[], row: number, onClick: clickHandler)\n{\n    return <>\r\n        {line.map((x, col) => renderTile(x, row, col, onClick))}\r\n    </>\r\n}\n\nconst peer = new Peer();\nlet conn: any = null;\nlet othercb: any = null;\nfunction connect(c: any) {\n    conn = c;\n    c.on('open', () => {\n        c.on('data', function(data: any) {\r\n            if (othercb)\r\n                othercb(data);\r\n            //alert(JSON.stringify(data));\r\n        })\r\n    });\r\n};\n\npeer.on('connection', (c) => {\n    if (!conn)\n        connect(c);\n});\n\nfunction App() {\n    let [board, setBoard]= useState(newBoard(4));\n    let [player, setPlayer] = useState(1);\n    let [other, setOther] = useState('');\n    let [text, setText] = useState('');\n    let [yourTurn, setYourTurn] = useState(true);\n\n    function onClick(row: number, col: number) {\n        if (board[row][col] != 0)\n            return;\n        if (!yourTurn)\n            return;\n        const nb = JSON.parse(JSON.stringify(board));\n        nb[row][col] = player;\n        setBoard(nb);\n        setPlayer(3 - player);\n        setYourTurn(!yourTurn)\n        conn.send({ row, col });\n        //alert(`${row}x${col}`);\r\n    }\n\n    othercb = ({row, col}: any) => {\n        const nb = JSON.parse(JSON.stringify(board));\n        nb[row][col] = player;\n        setBoard(nb);\n        setPlayer(3 - player);\n        setYourTurn(!yourTurn)\n\t};\n\n    console.log(peer.id);\n\n  return (\n    <div className=\"App\">\n        <div>v1</div>\n        {peer.id}\n        <input type=\"text\" onChange={(e) => setOther(e.target.value)}/><button onClick={() => connect(peer.connect(other))}>Connect</button>\n        {/*<input type=\"text\" onChange={(e) => setText(e.target.value)}/><button onClick={() => { setYourTurn(false); conn.send(text); setText(''); } }>Send</button>*/}\n        <div style={{ display: 'grid', width: '400px', height: '400px' }}>\n            {board.map((x, i) => renderLine(x, i, onClick))}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}