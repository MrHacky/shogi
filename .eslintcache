[{"C:\\Stuff\\shogi\\shogi\\src\\index.tsx":"1","C:\\Stuff\\shogi\\shogi\\src\\reportWebVitals.ts":"2","C:\\Stuff\\shogi\\shogi\\src\\App.tsx":"3","C:\\Stuff\\shogi\\shogi\\src\\game\\index.ts":"4"},{"size":500,"mtime":1612563745785,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1612563745787,"results":"7","hashOfConfig":"6"},{"size":5913,"mtime":1612563745782,"results":"8","hashOfConfig":"6"},{"size":3931,"mtime":1612563745783,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"ha0re6",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"12"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Stuff\\shogi\\shogi\\src\\index.tsx",[],["20","21"],"C:\\Stuff\\shogi\\shogi\\src\\reportWebVitals.ts",[],"C:\\Stuff\\shogi\\shogi\\src\\App.tsx",["22","23","24","25","26","27","28","29","30","31"],"import React, {useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Peer from 'peerjs';\n\nimport {\n    Piece,\n    BoardPiece,\n    Player,\n    Position,\n    Board,\n    startBoard,\n    allPositions,\n} from './game';\n\ntype BoardEmpty = {\n    piece: 'empty';\r\n}\n\ntype BoardCell = BoardPiece | BoardEmpty;\ntype BoardFile = [ BoardCell, BoardCell, BoardCell, BoardCell, BoardCell, BoardCell, BoardCell, BoardCell, BoardCell ];\n\ntype GameState = {\n    board: Board;\r\n};\n\nfunction renderSpear({ style }: { style: Object })\n{\n    return <>\r\n        <line x1=\"50\" y1=\"15\" x2=\"50\" y2=\"85\" style={style} />\r\n        <line x1=\"50\" y1=\"15\" x2=\"40\" y2=\"55\" style={style} />\r\n        <line x1=\"40\" y1=\"55\" x2=\"50\" y2=\"65\" style={style} />\r\n        <line x1=\"50\" y1=\"15\" x2=\"60\" y2=\"55\" style={style} />\r\n        <line x1=\"60\" y1=\"55\" x2=\"50\" y2=\"65\" style={style} />\r\n        <line x1=\"40\" y1=\"85\" x2=\"60\" y2=\"85\" style={style} />\r\n    </>;\r\n}\n\nfunction renderBishop({ style }: { style: Object })\n{\n    return <>\r\n        <rect x=\"20\" y=\"75\" width=\"60\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"30\" y=\"65\" width=\"40\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"45\" y=\"35\" width=\"10\" height=\"30\" fill=\"transparent\" style={style} />\r\n    </>;\r\n}\n\n\nfunction renderRook({ style }: { style: Object })\n{\n    return <>\r\n        <rect x=\"20\" y=\"75\" width=\"60\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"32\" y=\"35\" width=\"36\" height=\"40\" fill=\"transparent\" style={style} />\r\n        <rect x=\"25\" y=\"25\" width=\"50\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"25\" y=\"15\" width=\"10\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"45\" y=\"15\" width=\"10\" height=\"10\" fill=\"transparent\" style={style} />\r\n        <rect x=\"65\" y=\"15\" width=\"10\" height=\"10\" fill=\"transparent\" style={style} />\r\n    </>;\r\n}\n\nfunction renderPiece(piece?: Piece)\n{\n    const pieceRenderers: any = {\r\n        [Piece.Spear ]: renderSpear ,\r\n        [Piece.Rook  ]: renderRook  ,\r\n        [Piece.Bishop]: renderBishop,\r\n        \"\": () => null,\r\n    };\r\n    const style = {stroke:\"rgb(255,0,0)\",strokeWidth:\"2\"};\r\n    const svg = pieceRenderers[piece || \"\"]?.({ style: {} });\r\n    return  <svg height=\"100%\" width=\"100%\" style={style}>\r\n        {svg}\r\n    </svg>;\r\n}\n\n\nfunction renderCell(o: { piece?: BoardPiece, position: Position })\n{\r\n    const whiteCell = (o.position.y + o.position.x) % 2 == 0;\r\n\r\n    const cellStyle = {\r\n        gridRow: o.position.y + 1,\r\n        gridColumn: o.position.x + 1,\r\n        background: whiteCell ? 'grey' : 'lightgrey',\r\n        width: '100px',\r\n        height: '100px',\r\n    };\r\n\r\n    const pieceRenderers: any = {\r\n        [Piece.Spear]: renderSpear,\r\n        \"\": () => null,\r\n    };\r\n    const style = {stroke:\"rgb(255,0,0)\",strokeWidth:\"2\"};\r\n    const svg = pieceRenderers[o.piece?.piece || \"\"]?.({ style });\r\n\r\n    return <div style={cellStyle}>\r\n        {renderPiece(o.piece?.piece)}\r\n    </div>;\r\n\r\n            //{allPositions().map(({ x, y }) => <div style={{ gridRow: y + 1, gridColumn: x + 1 }}>{JSON.stringify(s[`${x}x${y}`] || {})}</div>)}\r\n}\n\nfunction AppShogi() {\n  let s: Board = startBoard();\n  console.log(s);\n\n  allPositions().map(({ x, y }) => <div>{x}-{y}</div>);\n  console.log([...new Array(9)].map((_1, y) => [...new Array(9)].map((_2, x) => ({ x, y }))).flat());\n\n  return (\n    <div className=\"App\">\n        <div style={{ display: 'grid', width: '900px', height: '900px' }}>\n            {allPositions().map(({ x, y }) => renderCell({ position: { x, y }, piece: s[`${x}x${y}`]}))}\n        </div>\n    </div>\n  );\n}\n\nfunction newBoard(size: number): number[][] {\n    const line1 = [2, ...[...new Array(size)].map((x, i) => i % 2 ? 1 : 0), 2];\n    const line2 = [2, ...[...new Array(size)].map((x, i) => i % 2 ? 0 : 2), 2];\n    const board = [...new Array(size)].map((x, i) => i % 2 ? line1 : line2);\n    return [\n        [1, ...[...new Array(size)].map(x => 1), 2],\n        ...board,\n        [2, ...[...new Array(size)].map(x => 1), 1],\n    ];\r\n}\n\ntype clickHandler = (row: number, col: number) => void;\n\nfunction renderTile(tile: number, row: number, col: number, onClick: clickHandler)\n{\n    const color = tile == 0 ? \"white\" : tile == 2 ? \"red\" : \"blue\";\r\n\n    return <span style={{background: color, gridRow: row + 1, gridColumn: col + 1, border: \"1px solid black\"}} onClick={(e) => onClick(row, col)}></span>\r\n}\n\nfunction renderLine(line: number[], row: number, onClick: clickHandler)\n{\n    return <>\r\n        {line.map((x, col) => renderTile(x, row, col, onClick))}\r\n    </>\r\n}\n\nconst peer = new Peer();\nlet conn: any = null;\n\nfunction connect(c: any) {\n    conn = c;\n    c.on('open', () => {\n        c.on('data', function(data: any) {\r\n            alert(JSON.stringify(data));\r\n        })\r\n    });\r\n};\n\npeer.on('connection', connect);\n\nfunction App() {\n    let [board, setBoard]= useState(newBoard(4));\n    let [player, setPlayer] = useState(1);\n    let [other, setOther] = useState('');\n    let [text, setText] = useState('');\n\n    function onClick(row: number, col: number) {\n        if (board[row][col] != 0)\n            return;\n        const nb = JSON.parse(JSON.stringify(board));\n        nb[row][col] = player;\n        setBoard(nb);\n        setPlayer(3 - player);\n        //alert(`${row}x${col}`);\r\n\t}\n\n    console.log(peer.id);\n\n  return (\n    <div className=\"App\">\n        {peer.id}\n        <input type=\"text\" onChange={(e) => setOther(e.target.value)}/><button onClick={() => connect(peer.connect(other))}>Connect</button>\n        <input type=\"text\" onChange={(e) => setText(e.target.value)}/><button onClick={() => { conn.send(text); setText(''); } }>Send</button>\n        <div style={{ display: 'grid', width: '400px', height: '400px' }}>\n            {board.map((x, i) => renderLine(x, i, onClick))}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Stuff\\shogi\\shogi\\src\\game\\index.ts",[],{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":2,"column":8,"nodeType":"38","messageId":"39","endLine":2,"endColumn":12},{"ruleId":"36","severity":1,"message":"40","line":9,"column":5,"nodeType":"38","messageId":"39","endLine":9,"endColumn":11},{"ruleId":"36","severity":1,"message":"41","line":21,"column":6,"nodeType":"38","messageId":"39","endLine":21,"endColumn":15},{"ruleId":"36","severity":1,"message":"42","line":23,"column":6,"nodeType":"38","messageId":"39","endLine":23,"endColumn":15},{"ruleId":"43","severity":1,"message":"44","line":79,"column":57,"nodeType":"45","messageId":"46","endLine":79,"endColumn":59},{"ruleId":"36","severity":1,"message":"47","line":94,"column":11,"nodeType":"38","messageId":"39","endLine":94,"endColumn":14},{"ruleId":"36","severity":1,"message":"48","line":103,"column":10,"nodeType":"38","messageId":"39","endLine":103,"endColumn":18},{"ruleId":"43","severity":1,"message":"44","line":134,"column":24,"nodeType":"45","messageId":"46","endLine":134,"endColumn":26},{"ruleId":"43","severity":1,"message":"44","line":134,"column":46,"nodeType":"45","messageId":"46","endLine":134,"endColumn":48},{"ruleId":"43","severity":1,"message":"49","line":167,"column":29,"nodeType":"45","messageId":"46","endLine":167,"endColumn":31},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"@typescript-eslint/no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Player' is defined but never used.","'BoardFile' is defined but never used.","'GameState' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'svg' is assigned a value but never used.","'AppShogi' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]